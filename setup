#!/bin/bash

# Author: Zach Wilson

# This script takes 1 argument and a target directory
# which must be a real path. It then moves the project
# to the target directory and downloads the 4 JAR files to lib.

# Moves directory to new location
function move_directory() {
  cd ..
  mv $PROJECT $DIR/$PROJECT
  cd $DIR/$PROJECT
  echo "$PROJECT moved to $DIR"
}

# Download all JARs
function download_jars() {
  echo "Downloading Stanford JARs to $LIB"
  echo "Creating 'lib' directory in $PROJECT"
  cd lib
  wget $CORE_NLP_CODE_URL -O $CORE_NLP_CODE
  wget $CORE_NLP_MODELS_URL -O $CORE_NLP_MODELS
  wget $OPEN_IE_CODE_URL -O $OPEN_IE_CODE
  wget $OPEN_IE_MODELS_URL -O $OPEN_IE_MODELS
  cd ..
}

# Prints usage of setup
function print_usage() {
  echo "usage: ./setup [path/to/target/directory]     installs project in directory"
  echo "       ./setup                                no arguments installs project to working directory"
  echo ""
}

# Prints manual download instructions
function print_download() {
  echo "If this is a reoccuring issue, please download the JARs directory"
  echo "from https://www.dropbox.com/sh/qjvjhgvxlkjpfzk/AACNZfywMVBwvSyJVTovOLSYa?dl=0"
  echo "and place them in 'lib' directory."
}

# Checks to ensure JARs were downloaded properly
function check_for_jars() {

  # Check Core NLP Code
  if [ ! -e $LIB/$CORE_NLP_CODE ]; then
    echo "$CORE_NLP_CODE was not downloaded properly! Please retry download."
    print_download
    exit
  fi

  # Check Core NLP Models
  if [ ! -e $LIB/$CORE_NLP_MODELS ]; then
    echo "$CORE_NLP_MODELS was not downloaded properly! Please retry download."
    print_download
    exit
  fi

  # Check Open IE Code
  if [ ! -e $LIB/$OPEN_IE_CODE ]; then
    echo "$OPEN_IE_CODE was not downloaded properly! Please retry download."
    print_download
    exit
  fi

  # Check Open IE Models
  if [ ! -e $LIB/$OPEN_IE_MODELS ]; then
    echo "$OPEN_IE_MODELS was not downloaded properly! Please retry download."
    print_download
    exit
  fi

  echo "Downloads successful. Setup complete."
}

CWD="${PWD##*/}"
if [ "$CWD" = "abstractive-summarization" ]; then
  PROJECT="abstractive-summarization"
elif [ "$CWD" = "abstractive-summarization-master" ]; then
  PROJECT="abstractive-summarization-master"
else
  echo "Please install from within abstractive-summarization project directory."
  echo "Project directory must be named 'abstractive-summarization' or 'abstractive-summarization-master'."
  exit 1
fi


# Core NLP Code
CORE_NLP_CODE_URL="https://www.dropbox.com/s/9k20n7zfo1tcvpe/stanford-corenlp-3.5.2.jar?dl=0"
CORE_NLP_CODE="stanford-corenlp-3.5.2.jar"

# Core NLP Models
CORE_NLP_MODELS_URL="https://www.dropbox.com/s/b1351vjbn4m2sil/stanford-corenlp-3.5.2-models.jar?dl=0"
CORE_NLP_MODELS="stanford-corenlp-3.5.2-models.jar"

# Open IE Code
OPEN_IE_CODE_URL="https://www.dropbox.com/s/h9idy1tajdnupjv/stanford-openie.jar?dl=0"
OPEN_IE_CODE="stanford-openie.jar"

# Open IE Models
OPEN_IE_MODELS_URL="https://www.dropbox.com/s/dxd8olkkvix8enq/stanford-openie-models.jar?dl=0"
OPEN_IE_MODELS="stanford-openie-models.jar"

echo ""

# If no installation directory was specified, use the working directory
if [ $# == 0 ]; then

  # Get parent directory
  WORKING_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
  DIR="$(dirname "$WORKING_DIR")"
  cd ..
  echo "No directory specified. Using working directory: $PWD"
  LIB="$DIR/$PROJECT/lib"
  cd $DIR/$PROJECT

elif [ $# == 1 ]; then

  # Get directory from arguments list and remove trailing '/'
  DIR=${1%/}
  echo "Specified directory: $DIR"
  LIB="$DIR/$PROJECT/lib"

  # If the directory does not exist, create it
  if [ ! -d "$DIR" ]; then
    echo "$DIR does not exist. Creating directory."
    mkdir "$DIR"
  fi

  # Move project to specified directory
  move_directory

else

  # Command line argument is incorrect; display instructions and exit
  echo "Error: too many arguments provided."
  print_usage
  exit 1

fi

# Download JARs
if [ -d "$DIR" ]; then
  download_jars
  check_for_jars
else
  echo "Unable to create directory $DIR."
  print_usage
fi
